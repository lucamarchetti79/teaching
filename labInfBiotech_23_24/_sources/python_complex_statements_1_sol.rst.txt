===========================
Lezione 8 - Soluzioni
===========================

If
---------------------------

#. Soluzione::

    numero = int(input("scrivi un numero: "))

    if numero % 2 == 0:
        print("pari")
    else:
        print("dispari")

   Uso ``else`` perche' pari e dispari sono le uniche due possibilita'.

   Volendo, posso esplicitare la terza possibilita', cioe' il caso in cui
   ``numero`` non e' ne' pari ne' dispari, cosi'::

    if numero % 2 == 0:
        print("pari")
    elif numero % 2 == 1:
        print("dispari")
    else:
        print("impossibile!")

   ma il codice nell'``else`` non verra' eseguito per nessun valore di ``numero``!

   Visto che le due possibilita' (``numero`` e' pari, ``numero`` e' dispari)
   sono mutualmente esclusive, posso anche permettermi di scrivere::

    if numero % 2 == 0:
        print("pari")
    if numero % 2 == 1:
        print("dispari")

   perche' anche in assenza dell'``else``, uno e solo uno dei due
   ``if`` puo' essere eseguito.

#. Soluzione::

    numero = float(input("scrivi un razionale: "))

    if numero >= -1 and numero <= 1:
        print("okay")

   Non servono ne'``elif`` (c'e' una sola condizione) ne' ``else`` (se la
   condizione e' falsa, non devo fare niente).

#. Soluzione::

    risposta = input("scrivi due numeri separati da spazio: ")

    parole = risposta.split()
    numero1 = int(parole[0])
    numero2 = int(parole[1])

    if numero1 > numero2:
        print("primo")
    elif numero2 > numero1:
        print("secondo")
    else:
        print("nessuno dei due")

   In alternativa::

    risposta = input("scrivi due numeri separati da spazio: ")

    numeri = [int(parola) for parola in risposta.split()]

    if numeri[0] > numeri[1]:
        print("primo")
    elif numeri[0] < numeri[1]:
        print("secondo")
    else:
        print("nessuno dei due")

#. Soluzione::

    oroscopo_di = {
        "gennaio": "fortuna estrema",
        "febbraio": "fortuna galattica",
        "marzo": "fortuna incredibile",
        "aprile": "ultra-fortuna",
    }

    mese = input("dimmi il tuo mese di nascita: ")

    if mese in oroscopo_di:
        print(oroscopo_di[mese])
    else:
        print("non disponibile")

#. Soluzione::

    percorso = input("scrivi il percorso: ")

    righe = open(percorso, "r").readlines()
    if len(righe) == 0:
        print("vuoto")
    elif len(righe) < 100:
        print("piccolo", len(righe))
    elif len(righe) < 1000:
        print("medio", len(righe))
    else:
        print("grande", len(righe))

   Si noti che non e' necessario specificare per intero le condizioni: nel
   codice abbrevio ``100 < len(righe) < 1000`` con ``len(righe) < 1000``. Me
   lo posso permettere perche' quando ``len(righe)`` e' minore di ``100``
   eseguo il primo ``elif``: il secondo ``elif`` non viene neanche considerato.

#. Soluzione::

    punto1 = [float(parola) for parola
              in input("scrivi tre coordinate: ").split()]

    punto2 = [float(parola) for parola
              in input("scrivi tre coordinate: ").split()]

    if punto1[0] >= 0 and punto1[1] >= 0 and punto1[2] >= 0 and \
       punto2[0] >= 0 and punto2[1] >= 0 and punto2[2] >= 0:
        diff_x = punto1[0] - punto2[0]
        diff_y = punto1[1] - punto2[1]
        diff_z = punto1[2] - punto2[2]

        print("la distanza e'", (diff_x**2 + diff_y**2 +  diff_z**2)**0.5)

   Si noti che il ``print`` e' *dentro* l'``if``.

#. Soluzione: sappiamo che ``numero`` e' un intero arbitrario (puo' essere
   qualunque intero deciso dall'utente). Il codice che ci interessa e' questo::

    if numero % 3 == 0:
        print("divide 3!")
    elif numero % 3 != 0:
        print("non divide 3!")
    else:
        print("boh")

   L'``if``, l'``elif`` e l'``else`` formano una catena: solo uno tra loro
   viene eseguito.

   #. L'``if`` viene eseguito se e solo se ``numero`` e' divisibile per tre.

   #. L'``elif`` viene eseguito se e solo se l'``if`` precedente non viene
      eseguito e se ``numero`` *non* e' divisibile per tre.

   #. L'``else`` viene eseguito quando ne' l'``if`` ne' l'``elif`` vengono
      eseguito.

   Visto che non ci sono numeri che non siano ne' divisibili ne' non-divisibili
   per ``3``, non resta alcuna altra possibilita'. O viene eseguito l'``if``,
   o viene eseguito l'``elif``: l'``else`` non viene *mai* eseguito.

   Quindi la risposta e' no.

#. Soluzione: come sopra, ``numero`` e' un intero arbitrario. Il codice e'::

    numero = int(input("scrivi un numero: "))
    if numero % 2 == 0:
        print("divide 2!")
    if numero % 3 == 0:
        print("divide 3!")
    if numero % 2 != 0 and numero % 3 != 0:
        print("boh")

   Qui non ci sono "catene" di ``if``, ``elif`` ed ``else``: ci sono tre ``if``
   indipendenti.

   #. Il primo ``if`` viene eseguito se e solo se ``numero`` e' divisibile per
      due.

   #. Il secondo ``if`` viene eseguito se e solo se ``numero`` e' divisibile
      per tre.

   #. Il terzo ``if`` viene eseguito se e solo se ``numero`` *non* e' divisibile
      ne' per due, ne' per tre.

   Se ``numero`` e' es. 6, che e' divisibile sia per due che per tre, allora i
   primi due ``if`` vengono entrambi eseguiti, mentre il terzo non viene
   eseguito.

   Se ``numero`` e' es. 5, che non e' divisibile ne' per due ne' per tre, allora
   i primi due ``if`` *non* vengono eseguiti; in compenso viene eseguito il
   terzo.

   Quindi la risposta e' si'.

   (Altri esempi: per ``numero = 2`` viene eseguito solo il primo ``if``, per
   ``numero = 3`` solo il secondo. Si noti pero' che non c'e' verso di *non*
   eseguire nessuno uno dei tre ``if``.)

#. Soluzione::

    risposta = input("somma o prodotto?: ")

    if risposta == "somma":
        numero1 = int(input("numero 1: "))
        numero2 = int(input("numero 2: "))
        print("la somma e'", numero1 + numero2)

    elif risposta == "prodotto":
        numero1 = int(input("numero 1: "))
        numero2 = int(input("numero 2: "))
        print("il prodotto e'", numero1 * numero2)

   Usare un ``if`` o un ``elif`` non altera l'esecuzione del programma.

   Posso semplificare cosi'::

    risposta = input("somma o prodotto?: ")
    numero1 = int(input("numero 1: "))
    numero2 = int(input("numero 2: "))

    if risposta == "somma":
        print("la somma e'", numero1 + numero2)

    elif risposta == "prodotto":
        print("il prodotto e'", numero1 * numero2)

For e While
---------------------

#. Soluzioni:

   #. Soluzione::

        for numero in range(10):
            print(numero)

   #. Soluzione::

        for numero in range(10):
            print(numero**2)

   #. Soluzione::

        somma_quadrati = 0
        for numero in range(10):
            somma_quadrati = somma_quadrati + numero**2
        print(somma_quadrati)

   #. Soluzione::

        prodotto = 1 # occhio che qui parto da 1!
        for numero in range(1,10):
            prodotto = prodotto * numero
        print(prodotto)

   #. Soluzione::

        volume_di = {
            "A":  67.0, "C":  86.0, "D":  91.0,
            "E": 109.0, "F": 135.0, "G":  48.0,
            "H": 118.0, "I": 124.0, "K": 135.0,
            "L": 124.0, "M": 124.0, "N":  96.0,
            "P":  90.0, "Q": 114.0, "R": 148.0,
            "S":  73.0, "T":  93.0, "V": 105.0,
            "W": 163.0, "Y": 141.0,
        }

        somma_volumi = 0
        for volume in volume_di.values():
            somma_volumi = somma_volumi + volume
        print(somma_volumi)

   #. Soluzione::

        volume_di = {
            "A":  67.0, "C":  86.0, "D":  91.0,
            "E": 109.0, "F": 135.0, "G":  48.0,
            "H": 118.0, "I": 124.0, "K": 135.0,
            "L": 124.0, "M": 124.0, "N":  96.0,
            "P":  90.0, "Q": 114.0, "R": 148.0,
            "S":  73.0, "T":  93.0, "V": 105.0,
            "W": 163.0, "Y": 141.0,
        }

        fasta = """>1BA4:A|PDBID|CHAIN|SEQUENCE
        DAEFRHDSGYEVHHQKLVFFAEDVGSNKGAIIGLMVGGVV"""

        # estraggo la sequenza
        sequenza = fasta.split("\n")[1]

        somma_volumi = 0

        # per ciascun carattere nella sequenza...
        for aa in sequenza:
            volume_di_aa = volume_di[aa]
            somma_volumi = somma_volumi + volume_di_aa

        print(somma_volumi)

   #. Soluzione: adatto il codice dell'esempio sopra::

        lista = [1, 25, 6, 27, 57, 12]

        minimo_fino_ad_ora = lista[0]
        for numero in lista[1:]:
            if numero < minimo_fino_ad_ora:
                minimo_fino_ad_ora = numero

        print("il minimo e':", minimo_fino_ad_ora)

   #. Soluzione: combino l'esempio e l'esercizio sopra::

        lista = [1, 25, 6, 27, 57, 12]

        massimo = lista[0]
        minimo = lista[0]

        for numero in lista[1:]:
            if numero > massimo:
                massimo = numero
            if numero < minimo:
                minimo = numero

        print("minimo =", minimo, "massimo =", massimo)

   #. Soluzione: ``range(0, len(sequenza), 3)`` restituisce ``[0, 3, 6, 9, ...]``,
      che sono le posizioni di inizio delle varie triplette.

      E' sufficiente scrivere::

        sequenza = "ATGGCGCCCGAACAGGGA"

        # parto da una lista vuota
        triplette = []

        for pos_inizio in range(0, len(sequenza), 3):
            tripletta = sequenza[pos_inizio:pos_inizio+3]
            triplette.append(tripletta)

        print(triplette)

   #. Soluzione::

        testo = """>2HMI:A|PDBID|CHAIN|SEQUENCE
        PISPIETVPVKLKPGMDGPKVKQWPLTEEKIKALVEICTEMEKEGKISKI
        >2HMI:B|PDBID|CHAIN|SEQUENCE
        PISPIETVPVKLKPGMDGPKVKQWPLTEEKIKALVEICTEMEKEGKISKI
        >2HMI:C|PDBID|CHAIN|SEQUENCE
        DIQMTQTTSSLSASLGDRVTISCSASQDISSYLNWYQQKPEGTVKLLIYY
        >2HMI:D|PDBID|CHAIN|SEQUENCE
        QITLKESGPGIVQPSQPFRLTCTFSGFSLSTSGIGVTWIRQPSGKGLEWL
        >2HMI:E|PDBID|CHAIN|SEQUENCE
        ATGGCGCCCGAACAGGGAC
        >2HMI:F|PDBID|CHAIN|SEQUENCE
        GTCCCTGTTCGGGCGCCA"""

        # prima di tutto rompo il testo in righe
        righe = testo.split("\n")

        # creo il dizionario dove metto il risultato voluto
        sequenza_di = {}

        # ora posso iterare sulle varie righe
        for riga in righe:

            if riga[0] == ">":
                # se la riga e' un'intestazione, estraggo il nome
                # della sequenza
                nome = riga.split("|")[0].lstrip(">")
            else:
                # altrimenti, e' la sequenza vera a propria. il
                # nome l'ho ricavato nell'iterazione precedente
                # (che corrisponde alla riga sopra nel file FASTA)
                # quindi lo posso usare per aggiornare il dizionario
                sequenza_di[nome] = riga

        print(sequenza_di)

#. Soluzioni:

   #. Soluzione::

        while input("scrivi 'STOP': ") != "STOP":
            print("devi scrivere 'STOP'...")

   #. Soluzione::

        while input("scrivi stop: ").lower() != "stop":
            print("devi scrivere stop...")

#. Soluzioni:

   #. Soluzione: tutti i numeri in ``range(10)``.

   #. Soluzione: il numero ``0``. Il ``break`` interrompe immediatamente il ``for``.

   #. Soluzione: tutti i numeri in ``range(10)``. Il ``continue`` salta all'iterazione successiva, cosa che Python fa automaticamente quando finisce il corpo del ciclo ``for``. Visto che ``continue`` in questo caso si trova proprio alla fine del corpo del ciclo ``for``, e come se non ci fosse.

   #. Soluzione: il numero ``0``. Nella primissima iterazione, quando ``numero`` vale ``0``, prima Python esegue ``print(numero)``, che stampa appunto ``0``; poi l'``if`` viene eseguito, e cosi' il ``break`` che contiene, che fa interrompere immediatamente il ``for``.

   #. Soluzione: niente. Nella primissima iterazione, quando ``numero`` vale ``0``, l'``if`` viene eseguito e cosi' il ``break`` che contiene, che fa interrompere immediatamente il ``for``. Il ``print`` non viene mai eseguito.

   #. Soluzione: niente. Il corpo del ``while`` non viene mai eseguito, la condizione e' ``False``!

   #. Soluzione: niente. Visto che il corpo del ``while`` non viene mai eseguito (la condizione e' ``False``!), la riga ``condizione = True`` non viene mai eseguita.

   #. Soluzione: ``"la condizione e' vera"`` un numero indefinito di volte. Visto che la condizione e' sempre ``True``, il ``while`` non finisce mai di iterare!

   #. Soluzione: dieci stringhe della forma ``"all'indice 0 c'e' l'elemento 0"``, ``"all'indice 1 c'e' l'elemento 1"``, *etc.*

   #. Soluzione: tutti gli elementi di ``righe`` (processati da ``strip()``) che vengono prima della prima riga vuota, vale a dire ``"riga 1"``, ``"riga 2"`` e ``"riga 3"``. Appena ``riga`` vale ``""`` (il quarto elemento di ``righe``) l'``if`` viene eseguito, e con esso il ``break``, che interrompe il ciclo. Si noti che la quarta riga *non* viene stampata.

#. Soluzione::

    numeri = (0, 1, 1, 0, 0, 0, 1, 1, 2, 1, 2)

    for i in range(len(numeri)):
        numero_in_pos_i = numeri[i]

        if numero_in_pos_i == 2:
            print("la posizione e'", i)
            break

#. Soluzione::

    stringhe = ("000", "51", "51", "32", "57", "26")

    for i in range(len(stringhe)):
        stringa_in_pos_i = stringhe[i]

        if "2" in stringa_in_pos_i:
            print("posizione =", i, "valore =", stringa_in_pos_i)
            break
