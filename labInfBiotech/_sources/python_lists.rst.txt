=============
Lezione 5 - Python: Liste
=============

Le liste rappresentano sequenze ordinate di oggetti arbitrari.

.. warning::

    Le liste sono **mutabili**!

Per definire una lista uso le parentesi quadre::

    # Una lista di interi (anche ripetuti)
    alcuni_interi = [1, 2, 1, 1, 9]

    # Una lista di stringhe
    proteine_uniprot = ["Y08501", "Q95747"]

    # Una lista mista
    cose = ["Y08501", 0.13, "Q95747", 0.96]

    # Una lista di liste
    lista_di_liste = [
        ["Y08501", 120, 520],
        ["Q95747", 550, 920],
    ]

    # La lista vuota
    una_lista_vuota = []

.. warning::

    Le liste possono contenere elementi ripetuti::

        [3, 3, 3, "a", "a", "a"] != [3, "a"]

    e l'ordine degli elementi conta::

        [1, 2, 3] != [3, 2, 1]

Operazioni
----------

========= ============================= ====================================================
Ritorna   Operatore                     Significato
========= ============================= ====================================================
``range`` ``range(int, [int, [int]])``  Restituisce un intervallo di interi
``int``   ``len(list)``                 Restituisce la lunghezza della lista
``list``  ``list + list``               Concatena le due liste
``list``  ``list * int``                Replica la lista
``bool``  ``object in list``            Controlla se un oggetto arbitrario appare nella lista
``list``  ``list[int:int]``             Estrae una sotto-lista
``list``  ``list[int] = object``        Sostituisce un elemento della lista
========= ============================= ====================================================

****

**Esempio**. Uso ``range()`` per costruire una lista di interi::

    >>> intervallo = range(0, 5)
    >>> lista = list(intervallo)    
    >>> print(lista)
    [0, 1, 2, 3, 4]

``range(5)`` fa la stessa cosa. Anche la chiamata ``range(0,5,1)`` sarebbe stata equivalente.

**Esempio**. 

    >>> inizio = 0
    >>> fine = 10
    >>> passo = 2
    >>> intervallo = range(inizio, fine, passo)
    >>> lista = list(intervallo)    
    >>> print(lista)
    [0, 2, 4, 6, 8]

****

**Esempio**.  La sostituzione di un elemento funziona solo se l'indice
corrisponde ad un elemento gia' esistente::

    lista = [0, 1, 2, 3, 4]

    lista[0] = "primo"
    print(lista)                         # ["primo", 1, 2, 3, 4]

    lista[-1] = "ultimo"
    print(lista)                         # ["primo", 1, 2, 3, "ultimo"]

    lista[100] = "oltre l'ultimo"        # Errore!

****

Esercizi
--------

#. Creare una lista vuota. Controllare che sia vuota con ``len()``.

#. Creare una lista con i primi cinque interi non-negativi: ``0``, ``1``, *etc.* usando ``range()``.

#. Creare una lista con cento elementi ``0``.

   *Hint*: replicate una lista con un solo elemento.

#. Date::

    lista_1 = list(range(10))
    lista_2 = list(range(10, 20))

   concatenare le due liste e mettere il risultato in una nuova lista
   ``lista_completa``. Quanto vale? E' uguale al risultato di ``list(range(20))``?

#. Creare una lista con tre stringhe: ``"sono"``, ``"una"``, ``"lista"``. Poi
   stampare a schermo tipo e lunghezza dei tre elementi, uno per uno.

#. Data::

    lista = [0.0, "b", [3], [4, 5]]

   #. Quanto e' lunga ``lista``?
   #. Di che tipo e' il primo elemento di ``lista``?
   #. Quanto e' lungo il secondo elemento di ``lista``?
   #. Quanto e' lungo il terzo elemento di ``lista``?
   #. Quanto vale l'ultimo elemento di ``lista``? Quanto e' lungo?
   #. La lista ha un elemento di valore ``"b"``?
   #. La lista ha un elemento di valore ``4``?

      *Hint*: usate ``in`` per controllare.

#. Che differenza c'e' tra le seguenti "liste"?::

    lista_1 = [1, 2, 3]
    lista_2 = ["1", "2", "3"]
    lista_3 = "[1, 2, 3]"

   *Hint*: la terza e' una lista?

#. Quali dei seguenti frammenti sono validi/errati?

   (Dopo ogni punto, cancellate la lista ``lista`` con ``del``, per evitare
   problemi con i punti successivi)

   #. ``lista = []``
   #. ``lista = [}``
   #. ``lista = [[]]``
   #. ``lista.append(0)``
   #. ``lista = []; lista.append(0)``
   #. ``lista = [1 2 3]``
   #. ``lista = list(range(3))``, ``elemento = lista[3]``
   #. ``lista = list(range(3))``, ``elemento = lista[-1]``
   #. ``lista = list(range(3))``, ``sottolista = lista[0:2]``
   #. ``lista = list(range(3))``, ``sottolista = lista[0:3]``
   #. ``lista = list(range(3))``, ``sottolista = lista[0:-1]``
   #. ``lista = list(range(3))``, ``lista[2] = "due"``
   #. ``lista = list(range(3))``, ``lista[3] = "tre"``
   #. ``lista = list(range(3))``, ``lista[-1] = "tre"``
   #. ``lista = list(range(3))``, ``lista[1.2] = "uno virgola due"``
   #. ``lista = list(range(3))``, ``lista[1] = ["testo-1", "testo-2"]``

#. Data la lista::

    matrice = [
        [1, 2, 3],          # <-- prima riga
        [4, 5, 6],          # <-- seconda riga
        [7, 8, 9],          # <-- terza riga
    ]
    #    ^  ^  ^
    #    |  |  |
    #    |  |  +-- terza colonna
    #    |  |
    #    |  +----- seconda colonna
    #    |
    #    +-------- prima colonna

   Come faccio a:

   #. Estrarre la prima riga?
   #. Estrarre il secondo elemento della prima riga?
   #. Sommare gli elementi della prima riga?
   #. Creare una nuova lista con gli elementi della la seconda colonna?
   #. Creare una nuova lista con gli elementi la diagonale maggiore?
   #. Creare una lista concatenando la prima, seconda, e terza riga?

Metodi
------

======== =========================== =================================================
Ritorna  Metodo                      Significato
======== =========================== =================================================
``None`` ``list.append(object)``     Aggiunge un elemento alla fine della lista
``None`` ``list.extend(list)``       Estende una lista con un'altra lista
``None`` ``list.insert(int,object)`` Inserisce un elemento in una posizione arbitraria
``None`` ``list.remove(object)``     Rimuove la prima ripetizione di un valore
``None`` ``list.reverse()``          Inverte la lista
``None`` ``list.sort()``             Ordina la lista
``int``  ``list.count(object)``      Conta il numero di ripetizioni di un valore
======== =========================== =================================================

.. warning::

    Tutti i metodi delle liste (escluso ``count()``):

    - Modificano la lista stessa.
    - Restituiscono ``None``.

    Questo comportamento e' l'esatto *opposto* di cio' che accade con i
    metodi delle stringhe!

    Una conseguenza e' che fare qualcosa come::

        print(lista.append(10))

    non ha senso, perche' ``print`` stampa il *risultato* di ``append()``,
    che e' sempre ``None``!

    Per lo stesso motivo *non* possiamo fare::

        lista.append(1).append(2).append(3)

    perche' il primo ``append()`` restituisce ``None`` -- che non e' una
    lista, e non possiamo farci ``append()``!

****

**Esempio**. ``append()`` aggiunge in *coda*::

    lista = list(range(10))
    print(lista)                         # [0, 1, 2, ..., 9]

    lista.append(10)
    print(lista)                         # [0, 1, 2, ..., 9, 10]

Notate come ``lista`` sia stata modificata! Se invece faccio::

    lista = list(range(10))
    risultato = lista.append(10)

    print(risultato)                     # None

Come ci aspettavamo, ``append()`` restituisce ``None``.

Lo stesso vale per ``extend()``::

    lista = list(range(10))
    risultato = lista.extend(list(range(10, 20)))

    print(lista)                         # [0, 1, 2, ..., 19]
    print(risultato)                     # None

Per inserire elementi in una posizione arbitraria, uso ``insert()``::

    lista = list(range(10))
    risultato = lista.insert(2, "un altro valore")

    print(lista)                         # [0, 1, "un altro valore", 3, ...]
    print(risultato)                     # None

``remove()`` invece prende un valore, non una posizione::

    lista = ["una", "lista", "non", "una", "stringa"]
    risultato = lista.remove("una")

    print(lista)                         # ["lista", "non", "una", "stringa"]
    print(risultato)                     # None

Anche ``sort()`` e ``reverse()`` modificano la lista stessa::

    lista = [3, 2, 1, 5, 4]

    risultato = lista.reverse()
    print(lista)                         # [4, 5, 1, 2, 3]
    print(risultato)                     # None

    risultato = lista.sort()
    print(lista)                         # [1, 2, 3, 4, 5]
    print(risultato)                     # None

Invece ``count()`` non modifica affatto la lista, e restituisce un ``int``::

    lista = ["a", "b", "a", "b", "a"]
    risultato_a = lista.count("a")      # 3
    risultato_b = lista.count("b")      # 2
    print("ci sono", risultato_a, "a, e", risultato_b, "b")

****

**Esempio**. Contrariamente ad ``append()`` e soci, la concatenazione non
modifica la lista originale::

    lista_1 = list(range(0, 10))
    lista_2 = list(range(10, 20))

    # usando la concatenazione +
    lista_completa = lista_1 + lista_2
    print(lista_1, "+", lista_2, "->", lista_completa)

    # usando extend()
    lista_completa = lista_1.extend(lista_2)
    print(lista_1, "estesa con", lista_2, "->", lista_completa)

Nel primo caso tutto funziona come vorrei; nel secondo ``lista_1`` e' estesa
con ``lista_2`` (che resta invariata), mentre ``lista_completa`` vale ``None``.

****

Come gestire la copia di una lista
----------------------------------

.. warning::

    Le liste sono strutture dati *mutabili* ed una variabile lista contiene solo un
    *riferimento* a tale oggetto.

Questi due fatti possono dare luogo ad effetti complicati, che
esploriamo nei prossimi esercizi e che sono esemplificati dalla seguente figura:

.. image:: figures/array_dict.png
    :scale: 70 %
    :alt: Copia di liste.
    :align: center


**Esempio**. Questo codice::

    sottolista = list(range(5))
    lista = [sottolista]
    print(lista)

crea una lista ``lista`` che contiene una lista ``sottolista`` come elemento.
Quando modifico ``sottolista``, che e' una lista e quindi e' mutabile, finisco
inavvertitamente per modificare anche ``lista``::

    sottolista.append(5)
    print(sottolista)

    print(lista)

**Esempio**. Questo codice mostra un'altra anomalia::

    lista = list(range(5))
    print(lista)

    finta_copia = lista         # copio solo il *riferimento* a lista!
    print(finta_copia)

    lista.append(5)
    print(lista)

    print(finta_copia)           # Ooops!

Questo accade perche' le due liste si riferiscono allo stesso
oggetto ``lista``. Se voglio creare una *copia* reale della lista ``lista``,
scrivo::

    lista = list(range(5))
    print(lista)

    copia_vera = list(lista)
    # oppure
    # copia_vera = [elem for elem in lista]
    
    print(copia_vera)

    lista.append(5)
    print(lista)

    print(copia_vera)

Esercizi
--------

#. Inserire nella lista ``lista`` prima un intero, poi una stringa, poi
   una lista.

    .. warning::
    
        La lista deve *esistere gia'* prima di poterci fare ``append()``,
        ``extend()``, ``insert()``, *etc.*. Ad esempio::
    
            >>> una_lista_che_non_ho_mai_definito.append(0)
    
        da' errore::
    
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
            NameError: name 'una_lista_che_non_ho_mai_definito' is not defined

#. Partendo (per ogni punto) da::

    lista = list(range(3))

   cosa fanno i seguenti frammenti di codice? (Ripartite ogni volta da
   ``lista = list(range(3))``.)

   #. ``lista.append(3)``
   #. ``lista.append([3])``
   #. ``lista.extend([3])``
   #. ``lista.extend(3)``
   #. ``lista.insert(0, 3)``
   #. ``lista.insert(3, 3)``
   #. ``lista.insert(3, [3])``
   #. ``lista.insert([3], 3)``

#. Che differenza c'e' tra::

    lista = []
    lista.append(list(range(10)))
    lista.append(list(range(10, 20)))

   e::

    lista = []
    lista.extend(list(range(10)))
    lista.extend(list(range(10, 20)))

   Di che lunghezza e' ``lista`` nei due casi?

#. Che cosa fa questo codice?::

    lista = [0, 0, 0, 0]
    lista.remove(0)

#. Che cosa fa questo codice?::

    lista = [1, 2, 3, 4, 5]
    lista.reverse()
    lista.sort()

   Posso riscriverlo cosi'?::

    lista = [1, 2, 3, 4, 5]
    lista.reverse().sort()

#. Data la lista::

    lista = list(range(10))

   mettere in ``lista_inversa`` gli elementi di ``lista`` in ordine inverso
   (dall'ultimo al primo) usando ``reverse()``. ``lista`` non deve essere
   alterata.

#. Data la lista::

    frammenti = [
        "KSYK",
        "SVALVV",
        "GVTGI",
        "VGSSLAEVLKLPD",
    ]

   mettere in ``frammenti_ordinati`` gli elementi di ``frammenti`` ordinati
   alfanumericamente con ``sort()``. ``frammenti`` non deve essere alterata.

#. (Una Curiosita' Inutile). Che "struttura" ha questa lista?::

    lista = []
    lista.append(lista)

