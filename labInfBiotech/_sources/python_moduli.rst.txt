==============
Lezione 3.1 - Python: Moduli
==============

Interprete Python
-------------------------

Le scorse volte abbiamo lavorato con l'interprete Python, Ã¨ stato divertente ma poco utile.

**A cosa serve l'interprete**
 
#. Testare funzioni del quale non ricordiamo il funzionamento
#. Interrogare la documentazione
#. Testare il codice che abbiamo scitto
#. Eseguire python in tempo reale (es interrogare database, inviare pacchetti in rete, etc...)



Moduli
------

Un'alternativa all'eseguire codice nell'interprete e' scrivere un *modulo*: un
file di testo con estensione ``.py`` in cui scrivete il codice da eseguire.

.. warning::

    L'estensione ``.py`` e' obbligatoria!

Per **scrivere** un modulo, diciamo il file ``eseguibile.py``, devo aprire un editor di testo (es nano, gedit, notepad++ etc), 
scrivere il codice python e salvarlo::

    eseguibile.py

Per **eseguire** un modulo, diciamo il file ``eseguibile.py``, scrivo dalla shell::

    python eseguibile.py


**PROVATE VOI**

#. Create un file prova.py
#. Scrivete un semplice programma che fa la somma di 2 numeri e stampate il risultato.
#. Lanciate il programa apppena scritto.


Per utilizzare le funzioni definite in un modulo all'interno di un altro, uso
``import``. Ad esempio, se in ``eseguibile.py`` voglio usare la funzione
``ordina_proteine()`` precedentemente definita nel modulo ``util.py``, scrivo
all'inizio di ``eseguibile.py``::

    import util

.. warning::

    Quando importate un modulo, omettete l'estensione ``.py``.

A questo punto posso usare ``ordina_proteine()`` cosi'::

    util.ordina_proteine()

.. warning::

    I contenuti di un modulo importato vengono prefissati col nome del modulo:
    qui abbiamo invocato ``util.ordina_proteine``, non semplicemente ``ordina_proteine``.



Esercizi
--------

#. Create un modulo che calcola i BMI.
#. Create un modulo che stampi una frase.

